name: PyTorch Build From Source

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v3

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Install apt dependencies
        run: |
          # sudo apt-get update -qq && sudo apt-get upgrade -qq -y
          sudo apt-get -qq install -y wget
          # sudo apt-get -qq install -y build-essential cmake unzip pkg-config
          # sudo apt-get -qq install -y libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev
          # sudo apt-get -qq install -y libjpeg-dev libpng-dev libtiff-dev
          # sudo apt-get -qq install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
          # sudo apt-get -qq install -y libxvidcore-dev libx264-dev
          # sudo apt-get -qq install -y libgtk-3-dev
          # sudo apt-get -qq install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran
          # sudo apt-get -qq install -y libhdf5-serial-dev graphviz
          # sudo apt-get -qq install -y python3-dev python3-tk python-imaging-tk
          # sudo apt-get -qq install -y linux-image-generic linux-image-extra-virtual
          # sudo apt-get -qq install -y linux-source linux-headers-generic
          # sudo apt-get -qq install -y protobuf-compiler

      # - name: Download Ninja and CMake
      #   id: cmake_and_ninja
      #   shell: cmake -P {0}
      #   run: |
      #     set(ninja_version "1.10.2")
      #     set(cmake_version "3.23.1")

      #     message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

      #     set(ninja_suffix "linux.zip")
      #     set(cmake_suffix "Linux-x86_64.tar.gz")
      #     set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")

      #     set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
      #     file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
      #     execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

      #     set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
      #     file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
      #     execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

      #     # Save the path for other steps
      #     file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
      #     message("::set-output name=cmake_dir::${cmake_dir}")

      #     execute_process(
      #       COMMAND chmod +x ninja
      #       COMMAND chmod +x ${cmake_dir}/cmake
      #     )

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.5
        id: cuda-toolkit
        with:
          cuda: "11.2.2"
        linux-local-args: '["--toolkit"]'

      - name: Test CUDA installation
        run: |
          echo "Installed CUDA version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "CUDA install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          which nvcc
          nvcc -V

      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniconda-version: "latest"
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: pipeswitch
          environment-file: env.yml
          python-version: 3.8
          auto-activate-base: false

      - name: Test conda installation
        run: |
          conda info
          conda list

      - name: Set environment variables
        run: |
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
          export MAX_JOBS=1
          export USE_CUDA=1
          export USE_CUDNN=1
          export PATH="${{steps.cuda-toolkit.outputs.CUDA_PATH}}/bin${PATH:+:${PATH}}"
          export LD_LIBRARY_PATH="${{steps.cuda-toolkit.outputs.CUDA_PATH}}/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
          export CUDA_HOME="/usr/local/cuda"
          export CUDNN_INCLUDE_DIR="$CONDA/envs/pipeswitch/include"
          export CUDNN_INCLUDE_PATH="$CONDA/envs/pipeswitch/include"
          export CUDNN_LIB_DIR="$CONDA/envs/pipeswitch/lib"
          export CUDNN_LIBRARY_PATH="$CONDA/envs/pipeswitch/lib"
          export CUDNN_LIBRARY="$CONDA/envs/pipeswitch/lib"

      - name: Clone and build PyTorch
        run: |
          wget https://github.com/pytorch/pytorch/releases/download/v1.11.0/pytorch-v1.11.0.tar.gz
          tar -xzf pytorch-v1.11.0.tar.gz
          cd pytorch-v1.11.0
          python setup.py install
          chmod +x ${{github.workspace}}/pytorch_plugins/overwrite.sh
          bash ${{github.workspace}}/pytorch_plugins/overwrite.sh .
          python setup.py install
          export PYTHONPATH=$PYTHONPATH:$PWD

      - name: Test PyTorch installation
        run: |
          python3 ${{github.workspace}}/test/pt.py
